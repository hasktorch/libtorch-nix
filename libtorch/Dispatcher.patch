--- libtorch.org/include/ATen/core/dispatch/Dispatcher.h	2020-02-21 20:16:53.000000000 +0900
+++ libtorch/include/ATen/core/dispatch/Dispatcher.h	2020-02-21 20:17:57.000000000 +0900
@@ -183,8 +183,8 @@
 template<class Return, class... Args>
 inline Return Dispatcher::doCallUnboxed(const DispatchTable& dispatchTable, const LeftRight<ska::flat_hash_map<TensorTypeId, KernelFunction>>& backendFallbackKernels, Args... args) const {
   detail::unused_arg_(args...);  // workaround for a false-positive warning about unused parameters in gcc 5
+  c10::optional<TensorTypeId> dispatchKey = dispatchTable.dispatchKeyExtractor().getDispatchKeyUnboxed(args...);
   return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {
-    c10::optional<TensorTypeId> dispatchKey = dispatchTable.dispatchKeyExtractor().getDispatchKeyUnboxed(args...);
     const KernelFunction& kernel = dispatch_(dispatchTable, backendFallbackKernels, dispatchKey);
     return kernel.template callUnboxed<Return, Args...>(std::forward<Args>(args)...);
   });
@@ -205,8 +205,8 @@
 template<class Return, class... Args>
 inline Return Dispatcher::doCallUnboxedOnly(const DispatchTable& dispatchTable, const LeftRight<ska::flat_hash_map<TensorTypeId, KernelFunction>>& backendFallbackKernels, Args... args) const {
   detail::unused_arg_(args...);  // workaround for a false-positive warning about unused parameters in gcc 5
+  c10::optional<TensorTypeId> dispatchKey = dispatchTable.dispatchKeyExtractor().getDispatchKeyUnboxed<Args...>(args...);
   return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {
-    c10::optional<TensorTypeId> dispatchKey = dispatchTable.dispatchKeyExtractor().getDispatchKeyUnboxed<Args...>(args...);
     const KernelFunction& kernel = dispatch_(dispatchTable, backendFallbackKernels, dispatchKey);
     return kernel.template callUnboxedOnly<Return, Args...>(std::forward<Args>(args)...);
   });
